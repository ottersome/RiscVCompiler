Additional rules for the Mini-Pascal language.  



1.  A programmer cannot define new type names.

2.  Comments are marked with two slashes and extend the end of the line. For example,
	// this is a comment.
    Comments may also be enclosed in the pair /* and */, such as
	/* hello, this is also a comment.  */
    This comments may span multiple lines.
    You may invent your own syntax for comments if necessary.

3.  The difference between "num" and "integer" tokens (please see MINI-PASCAL-GRAMMAR.txt):
    "initeger" is a keyword.  It is a token. It stands for the name of a type.
    In contrast, "num" is the token for all numbers, such as 3.14, 999, 123, 
    2.71, etc. You may even define strings such as "2.503E-7" as a "num" token.  
    We do not specify the exact regular expressions for num. You need to define a reasonable 
    expression, such as 123, 34.764, 2.53E+24, etc.

4.  Strings are treated as a basic type.  You need to define reasonable regular
    expressions for strings. You may use C-style or Fortran-style strings. 
    You may even build a library for functions related to strings (for extra credits). 
    A string may not span across multiple lines.

5.  We use name equivalence for type compatibility. You need to design a reasonable
    type system for mini-pascal. You can use a simple type system for mini-pascal.

6.  We forbid to add an integer and a real number together. Explicit cast is needed.

7.  A function's value is the value of the variable whose name is the same as 
    the function. For example,

   function  addition(a, b: integer) : integer;
      begin
         addition := a + b;  // this is the return value
      end;

    If a function did not set up a return value, a compiler may generate an error message.

8.  We may assign an arry to another. For example,
    
	var a, b: array [ 23 .. 57 ] of integer;
	a := b;

9.  All parameters are passed by value.

10. We can assign a whole array to a variable. For example,

    VAR a, b : array [ 1 .. 10 ] of array [ 1 .. 10 ] of Integer;
    a[5] := b[3]; 

11.  Array indices could be negative. For example,

    VAR a : Array [ -5 .. 5 ] of Integer ;
    a[ -5 ] := -5;
    a[ -1 ] := -10;

12.  To call a procdure, we simply refer to the name of the procedure plus appropriate parameters. This corresponds to the following two rules in the Mini-pascal grammar:

		procedure_statement ::= id
			| id ( expression_list )

13. We allow overloading.  A function and a variable may have the same name if the type of the function's return value and the type of the variable are different. There could be multiple functions with the same name if they will never cause trouble in any Mini-Pascal programs.

14. Mini-Pascal is not an object-oriented language.  However, you may extend Mini-Pascal to include object-oriented features, such as inheritance (extra credits).

15. A number could be prefixed with an optional positive/negative sign. A number could be an integer or a floating-point number. You may define the regular expression for a number in an appropriate way.

16. Furthermore, in the Mini-Pascal grammar, there are strings, such as "hello". A string is enclosed in a pair of double quotes. A string may not contain end-of-lines and double quotes unless they are properly escaped, as in C. You need to define a regular exrepssion for strings. However, there are not string type, no string operators, and no string variables. Strings may be used only in PrintString. Similarly, there is no char type, non char variables, no char constant.

17. In Mini-Pascal, upper-case letters and lower-case letters in names are considered equivalent. For instance, aBcD = abcd = ABCD. This is different from the rule in the C language.

18. You may add overload resolution to the compiler.

19. An identifier begins with an English letter a-z and may include English letters, digits (0-9), and the underscores_.  

20. Illegal characters should be reported character by character.

21. This mini-pascal language is a simplified version of the Pascsal language. If you have doubts with the mini-pascal language (syntax or semantics), pleas discuss your doubts with me.
--